from collections import deque
input_string = """
+----------------------------+
|o______X_______X_X_________X|
|X___X_X_________________X___|
|_____X_X_________X_________X|
|______________X_____X___X___|
|_______X_________X___X_____X|
|____X_____X___X_____________|
|_______X___X_____X_X________|
|X___X_______________________|
|_X_____X_X_________X_X_____X|
|__________________________X_|
|_________X_X_____X_X___X____|
|________________X_______X_X#|
+----------------------------+
"""
maze = [list(row) for row in input_string.strip().split('\n')]#строка в список списков

#поиск нач и конеч точки
start = None
end = None
for r, row in enumerate(maze):
    for c, cell in enumerate(row):
        if cell == 'o':
            start = (r, c)
        elif cell == '#':
            end = (r, c)

if start is None or end is None:#проверка,что старт и финиш найдены
    print("Не найдены начальная или конечная точка")
    exit()

directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]#Куда можно двигатьсяЖвверх, вниз, влево, вправо

def find_path(maze, start, end):#ункция поиска пути
    queue = deque([(start, [start])])  #очередь для поиска в ширину(текущее положение и сампуть)
    visited = set([start])  #все посещенныеклетки

    while queue:
        (r, c), path = queue.popleft()

        if (r, c) == end:
            return path  #найден путь до конца

        for dr, dc in directions:
            nr, nc = r + dr, c + dc

            if 0 <= nr < len(maze) and 0 <= nc < len(maze[0]):
                if maze[nr][nc] != 'X' and maze[nr][nc] != '+' and (nr, nc) not in visited:
                    queue.append(((nr, nc), path + [(nr, nc)]))
                    visited.add((nr, nc))

    return None  # если путь не найден

path = find_path(maze, start, end)#найти путь

if path:#вывестиесли путь не найден
    for r, c in path:
        maze[r][c] = '*'
    end_r, end_c = end
    maze[end_r][end_c] = 'o'

    for row in maze:#лабиринт с пройденным путем
        print(''.join(row))
else:
    print("Путь не найден")